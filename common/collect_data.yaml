---
# vim: set ft=ansible:
#
# This set of tasks collects information about the system and does some basic
# checking against expected values.  The information is stored in facts that
# can be used later tasks/plays.
#
# This data was originally collected as part of Jenkins job that generated an
# email about the system under test.  It is retained here for backward
# compatibility reasons.
#
# It expects the following variables to be defined before it can be used:
#  - redhat_release
#  - fedora_release
#  - centos_release
#  - key_pkgs_list
#
# See `tests/new-tree-smoketest/group_vars/all` for an example of values
#
- name: Check /etc/redhat-release (RHEL)
  shell: grep -q "{{ redhat_release }}" /etc/redhat-release
  when: ansible_distribution == "RedHat"

- name: Check /etc/redhat-release (Fedora)
  shell: grep -q "{{ fedora_release }}" /etc/redhat-release
  when: ansible_distribution == "Fedora"

- name: Check /etc/redhat-release (CentOS)
  shell: grep -q "{{ centos_release }}" /etc/redhat-release
  when: ansible_distribution == "CentOS"

- name: Record content of /etc/redhat-release
  shell: cat /etc/redhat-release
  register: rhr

- name: Record content of /etc/os-release
  shell: cat /etc/os-release
  register: osr

- name: Record output from 'atomic host status'
  shell: atomic host status
  register: ahs

- name: Extract version and commit ID from 'atomic host status'
  shell: atomic host status | awk '/^*/{print $4, $5}'
  register: ver_and_id

- name: Set facts (version, commit ID, redhat-release, os-release)
  set_fact:
    atomic_host_status: "{{ ahs.stdout }}"
    atomic_ver: "{{ ver_and_id.stdout.split()[0] }}"
    commit_id: "{{ ver_and_id.stdout.split()[1] }}"
    redhat_release: "{{ rhr.stdout }}"
    os_release: "{{ osr.stdout }}"

- name: Check for ostree signature
  shell: ostree show "{{ commit_id }}" | grep "{{ redhat_key_id }}"
  when: ansible_distribution == "RedHat"

- name: Record ostree signature
  shell: ostree show "{{ commit_id }}"
  register: ostree_sig

- name: Collect info about "key" packages
  command: rpm -q "{{ item }}"
  register: key_pkgs
  with_items: "{{ key_pkgs_list }}"

- name: Collect info about "atomic" packages
  shell: rpm -qa | grep .atomic. | sort
  register: atomic_pkgs
  when: (ansible_distribution == "RedHat") or
        (ansible_distribution == "CentOS")
